apply plugin: 'java'
apply plugin: 'kotlin'

buildscript {
    ext.sandbox_version = '1.0'
    ext.asm_version = '6.2'
    ext.fast_classpath_scanner_version = '2.18.1'
    ext.picocli_version = '3.0.0-beta-2'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // ASM: byte code manipulation library
    compile "org.ow2.asm:asm:$asm_version"
    compile "org.ow2.asm:asm-tree:$asm_version"
    compile "org.ow2.asm:asm-util:$asm_version"
    compile "org.ow2.asm:asm-commons:$asm_version"

    // Classpath scanner
    compile "io.github.lukehutch:fast-classpath-scanner:$fast_classpath_scanner_version"

    // CLI utilities
    compile "info.picocli:picocli:$picocli_version"

    // Test utilities
    testCompile "junit:junit:$junit_version"
    testCompile "org.assertj:assertj-core:$assertj_version"
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
    exclude "META-INF/*.SF"
    exclude "META-INF/*.MF"
    manifest {
        attributes(
                'Main-Class': 'net.corda.sandbox.tools.cli.Program',
                'Automatic-Module-Name': 'net.corda.sandbox'
        )
    }
    archiveName "corda-djvm-${sandbox_version}.jar"
}

repositories {
    mavenLocal()
    mavenCentral()
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
